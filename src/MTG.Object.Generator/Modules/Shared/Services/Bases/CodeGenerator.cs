using System.Text;
using MTG.Object.Generator.Modules.Shared.Interfaces.Bases;

namespace MTG.Object.Generator.Modules.Shared.Services.Bases;

internal abstract class CodeGenerator : ICodeGenerator {
    public virtual void GenerateFooter(StringBuilder classBuilder) {
        classBuilder.AppendLine("}");
    }

    public abstract void GenerateConstructor(StringBuilder classBuilder, string className);

    public virtual void GenerateHeader(StringBuilder classBuilder, string @namespace, params string[] subNamespaces) {
        var subNameSpaces = GetSubNameSpaces(subNamespaces);
        classBuilder.AppendLine("//------------------");
        classBuilder.AppendLine("//<auto-generated />");
        classBuilder.AppendLine("//------------------");
        classBuilder.AppendLine();
        classBuilder.AppendLine("using System.CodeDom.Compiler;");
        classBuilder.AppendLine();
        classBuilder.AppendLine($"namespace MTG.Objects.{@namespace}{subNameSpaces};");
        classBuilder.AppendLine();
    }

    private static string GetSubNameSpaces(IEnumerable<string> subNamespaces) {
        return subNamespaces
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Aggregate(string.Empty, (current, subNamespace) => current + $".{subNamespace}");
    }
}